package main

import "fmt"

// Реализовать быструю сортировку массива (quicksort) встроенными методами языка.

// Алгоритм:

// 1. Выбрать опорный элемент из массива.
// 2. Разбиение: перераспределение элементов в массиве таким образом,
// 	  что элементы, меньшие опорного, помещаются перед ним, а большие или равные - после.
// 3. Рекурсивно применить первые два шага к двум подмассивам слева и справа от опорного элемента.
// 	  Рекурсия не применяется к массиву, в котором только один элемент или отсутствуют элементы.

// Разделяй и влавствуй

const (
	verbose = true
)

func vPrintfln(format string, a ...any) {
	if verbose {
		fmt.Printf(format+"\n", a...)
	}
}

func quicksort(arr []int, lo, hi int) {
	// Пока индексы не перемешались (и длина массива > 1)
	if lo < hi {
		// Разделение массива на два
		// Возвращает div - делящий индекс
		// В  левой части  < arr[div], 
		// В правой части  > arr[div]
		div := partition(arr, lo, hi)
		// Рекурсивно вызываем сортироку для подмассивов
		quicksort(arr, lo, div)
		quicksort(arr, div+1, hi)
	}
}

func partition(arr []int, lo, hi int) int {
	// Берем в средний элемент качестве опорного
	// Всегда берется левый, если кол-во элементов четное
	// Например [0 3 2 2] - берется 3
	pivot := arr[(lo+hi)/2]

	vPrintfln("pivot: %d, lo: %d, hi: %d", pivot, lo, hi)

	// Пока верхняя и нижняя границы не равны или не поменялись местами
	for {
		// Слева направо ищем элемент > опортного элемента (его индекс)
		for arr[lo] < pivot {
			lo++
		}
		// Справа налево ищем элемент < опортного элемента (его индекс)
		for arr[hi] > pivot {
			hi--
		}
		// Если таких не нашлось и границы перемешались, то возвращаем индекс-разделитель массивов
		if lo >= hi {
			vPrintfln("p=%d, new arr: %v", hi, arr)
			return hi
		}
		vPrintfln("Swap A[%d]=%d <> A[%d]=%d", lo, arr[lo], hi, arr[hi])
		// Если есть элементы, которые:
		// слева больше опорного
		// справа меньше опорного
		// то меняем их местами
		arr[lo], arr[hi] = arr[hi], arr[lo]
		// так как изменение прошло, то сдвигаем границы
		lo++
		hi--

	}
}

// Обертка под вызов рекурсии
func Quicksort(arr []int) {
	// Начальные границы - весь массив
	quicksort(arr, 0, len(arr)-1)
}

func main() {
	arr := []int{3, 7, 8, 5, 2, 1, 9, 6, 4}
	fmt.Printf("Unsorted Array - %v\n", arr)

	Quicksort(arr)

	fmt.Printf("Sorted Array - %v", arr)
}
